package com.cts.util.tools.mainjob;

import java.io.BufferedReader;
import java.io.ByteArrayInputStream;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStreamWriter;
import java.io.Writer;
import java.net.URL;

import javax.xml.parsers.DocumentBuilder;
import javax.xml.parsers.DocumentBuilderFactory;
import javax.xml.parsers.ParserConfigurationException;
// For write operation
import javax.xml.transform.Transformer;
import javax.xml.transform.TransformerConfigurationException;
import javax.xml.transform.TransformerException;
import javax.xml.transform.TransformerFactory;
import javax.xml.transform.dom.DOMSource;
import javax.xml.transform.stream.StreamResult;
import javax.xml.transform.stream.StreamSource;

import org.w3c.dom.Document;
import org.xml.sax.SAXException;

import com.berryworks.edireader.demo.IOString;

public class Stylizer {
	// Global value so it can be ref'd by the tree-adapter
	static Document document;
	
	public static String applyXMLStyle(InputStream strXSLTPath, String strXMLData) {

		//URL url = Stylizer.class.getResource(strXSLTPath);
		
		
		DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();
		IOString res = new IOString();
		Writer out = new OutputStreamWriter(res.getOutputStream());
		StreamResult result = new StreamResult(out);

		try {
			//File stylesheet = new File(strXSLTPath);
			//File stylesheet = new File(url.getPath());
			DocumentBuilder builder = factory.newDocumentBuilder();
			document = builder.parse(new ByteArrayInputStream(strXMLData.getBytes()));

			// Use a Transformer for output
			TransformerFactory tFactory = TransformerFactory.newInstance();
			StreamSource stylesource = new StreamSource(strXSLTPath);
			Transformer transformer = tFactory.newTransformer(stylesource);
			DOMSource source = new DOMSource(document);
			transformer.transform(source, result);
		} catch (TransformerConfigurationException tce) {
			// Error generated by the parser
			System.out.println("\n** Transformer Factory error");
			System.out.println("   " + tce.getMessage());

			// Use the contained exception, if any
			Throwable x = tce;

			if (tce.getException() != null) {
				x = tce.getException();
			}

			x.printStackTrace();
		} catch (TransformerException te) {
			// Error generated by the parser
			System.out.println("\n** Transformation error");
			System.out.println("   " + te.getMessage());

			// Use the contained exception, if any
			Throwable x = te;

			if (te.getException() != null) {
				x = te.getException();
			}

			x.printStackTrace();
		} catch (SAXException sxe) {
			// Error generated by this application
			// (or a parser-initialization error)
			Exception x = sxe;

			if (sxe.getException() != null) {
				x = sxe.getException();
			}

			x.printStackTrace();
		} catch (ParserConfigurationException pce) {
			// Parser with specified options can't be built
			pce.printStackTrace();
		} catch (IOException ioe) {
			// I/O error
			ioe.printStackTrace();
		}
		
		catch(Exception e){
			
			e.printStackTrace();
		}
		return res.getString();
	
	}

	public static void main(String[] args) throws IOException {
		
	 
		
		StringBuilder xmlData=new StringBuilder();
		String xmldata1=null,line;
		File xmlfile=new File(args[1]);
		BufferedReader br=new BufferedReader(new FileReader(xmlfile));
		
		while( (line=br.readLine())!=null)
			{  
			xmlData.append(line) ;}
		
		 
		xmldata1=applyXMLStyle(new FileInputStream(args[0]),xmlData.toString());
		 
		System.out.println("*****EDI Data*****  \n\n "+xmldata1);

	} // main
}


